// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package data

import (
	"context"
	"time"
)

const createAttachment = `-- name: CreateAttachment :one
INSERT INTO
  Attachment (
    uuid,
    type,
    file_name,
    file_type,
    file_size,
    personDataID
  )
VALUES
  (?, ?, ?, ?, ?, ?) RETURNING id, uuid, type, file_name, file_type, file_size, persondataid, createdat
`

type CreateAttachmentParams struct {
	Uuid         string
	Type         string
	FileName     string
	FileType     string
	FileSize     int64
	Persondataid int64
}

func (q *Queries) CreateAttachment(ctx context.Context, arg CreateAttachmentParams) (Attachment, error) {
	row := q.db.QueryRowContext(ctx, createAttachment,
		arg.Uuid,
		arg.Type,
		arg.FileName,
		arg.FileType,
		arg.FileSize,
		arg.Persondataid,
	)
	var i Attachment
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Type,
		&i.FileName,
		&i.FileType,
		&i.FileSize,
		&i.Persondataid,
		&i.Createdat,
	)
	return i, err
}

const createPerson = `-- name: CreatePerson :one
INSERT INTO
  Person (
    uuid,
    name,
    sex,
    date_of_birth,
    contact,
    father_name,
    occupation_type,
    budget,
    annual_income,
    place_of_birth,
    notes
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, uuid, name, sex, date_of_birth, place_of_birth, father_name, contact, occupation_type, budget, annual_income, notes, createdat, modifiedat
`

type CreatePersonParams struct {
	Uuid           string
	Name           string
	Sex            string
	DateOfBirth    time.Time
	Contact        string
	FatherName     string
	OccupationType string
	Budget         float64
	AnnualIncome   float64
	PlaceOfBirth   string
	Notes          string
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (Person, error) {
	row := q.db.QueryRowContext(ctx, createPerson,
		arg.Uuid,
		arg.Name,
		arg.Sex,
		arg.DateOfBirth,
		arg.Contact,
		arg.FatherName,
		arg.OccupationType,
		arg.Budget,
		arg.AnnualIncome,
		arg.PlaceOfBirth,
		arg.Notes,
	)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Sex,
		&i.DateOfBirth,
		&i.PlaceOfBirth,
		&i.FatherName,
		&i.Contact,
		&i.OccupationType,
		&i.Budget,
		&i.AnnualIncome,
		&i.Notes,
		&i.Createdat,
		&i.Modifiedat,
	)
	return i, err
}

const deletePerson = `-- name: DeletePerson :exec
DELETE FROM Person
WHERE
  id = ?
`

func (q *Queries) DeletePerson(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePerson, id)
	return err
}

const getAttachmentsByPersonID = `-- name: GetAttachmentsByPersonID :many
SELECT
  id, uuid, type, file_name, file_type, file_size, persondataid, createdat
FROM
  Attachment
WHERE
  personDataID = ?
`

func (q *Queries) GetAttachmentsByPersonID(ctx context.Context, persondataid int64) ([]Attachment, error) {
	rows, err := q.db.QueryContext(ctx, getAttachmentsByPersonID, persondataid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attachment
	for rows.Next() {
		var i Attachment
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Type,
			&i.FileName,
			&i.FileType,
			&i.FileSize,
			&i.Persondataid,
			&i.Createdat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPerson = `-- name: GetPerson :one
SELECT
  id, uuid, name, sex, date_of_birth, place_of_birth, father_name, contact, occupation_type, budget, annual_income, notes, createdat, modifiedat
FROM
  Person
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetPerson(ctx context.Context, id int64) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPerson, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Sex,
		&i.DateOfBirth,
		&i.PlaceOfBirth,
		&i.FatherName,
		&i.Contact,
		&i.OccupationType,
		&i.Budget,
		&i.AnnualIncome,
		&i.Notes,
		&i.Createdat,
		&i.Modifiedat,
	)
	return i, err
}

const getPersonByUUID = `-- name: GetPersonByUUID :one
SELECT
  id, uuid, name, sex, date_of_birth, place_of_birth, father_name, contact, occupation_type, budget, annual_income, notes, createdat, modifiedat
FROM
  Person
WHERE
  uuid = ?
LIMIT
  1
`

func (q *Queries) GetPersonByUUID(ctx context.Context, uuid string) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPersonByUUID, uuid)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Sex,
		&i.DateOfBirth,
		&i.PlaceOfBirth,
		&i.FatherName,
		&i.Contact,
		&i.OccupationType,
		&i.Budget,
		&i.AnnualIncome,
		&i.Notes,
		&i.Createdat,
		&i.Modifiedat,
	)
	return i, err
}

const listPersons = `-- name: ListPersons :many
SELECT
  id, uuid, name, sex, date_of_birth, place_of_birth, father_name, contact, occupation_type, budget, annual_income, notes, createdat, modifiedat
FROM
  Person
`

func (q *Queries) ListPersons(ctx context.Context) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, listPersons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Name,
			&i.Sex,
			&i.DateOfBirth,
			&i.PlaceOfBirth,
			&i.FatherName,
			&i.Contact,
			&i.OccupationType,
			&i.Budget,
			&i.AnnualIncome,
			&i.Notes,
			&i.Createdat,
			&i.Modifiedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePerson = `-- name: UpdatePerson :exec
UPDATE Person
SET
  name = ?,
  sex = ?,
  date_of_birth = ?,
  contact = ?,
  father_name = ?,
  occupation_type = ?,
  budget = ?,
  annual_income = ?,
  place_of_birth = ?,
  notes = ?,
  modifiedAt = CURRENT_TIMESTAMP
WHERE
  id = ?
`

type UpdatePersonParams struct {
	Name           string
	Sex            string
	DateOfBirth    time.Time
	Contact        string
	FatherName     string
	OccupationType string
	Budget         float64
	AnnualIncome   float64
	PlaceOfBirth   string
	Notes          string
	ID             int64
}

func (q *Queries) UpdatePerson(ctx context.Context, arg UpdatePersonParams) error {
	_, err := q.db.ExecContext(ctx, updatePerson,
		arg.Name,
		arg.Sex,
		arg.DateOfBirth,
		arg.Contact,
		arg.FatherName,
		arg.OccupationType,
		arg.Budget,
		arg.AnnualIncome,
		arg.PlaceOfBirth,
		arg.Notes,
		arg.ID,
	)
	return err
}

const updatePersonNote = `-- name: UpdatePersonNote :exec
UPDATE Person
SET
  notes = ?,
  modifiedAt = CURRENT_TIMESTAMP
WHERE
  id = ?
`

type UpdatePersonNoteParams struct {
	Notes string
	ID    int64
}

func (q *Queries) UpdatePersonNote(ctx context.Context, arg UpdatePersonNoteParams) error {
	_, err := q.db.ExecContext(ctx, updatePersonNote, arg.Notes, arg.ID)
	return err
}
